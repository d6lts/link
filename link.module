<?php
// $Id$

/**
 * @file
 * Defines simple link field types.
 */

/**
 * Implementation of hook_help().
 */
function link_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Defines simple link field types. <em>Note: Requires content.module.</em>');
  }
}

/**
 * Implementation of hook_field_info().
 */
function link_field_info() {
  return array(
    'link' => array('label' => 'Link'),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function link_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      
      $options = array (
        'optional' => t('Optional Title'),
        'required' => t('Required Title'),
        'none' => t('No Title'),
      );
      
      $form['title'] = array(
        '#type' => 'radios',
        '#title' => t('Link Title'),
        '#default_value' => isset($field['title']) ? $field['title'] : 'optional',
        '#options' => $options,
      );
      
      $options = array(
        'default' => t('Default (no target attribute)'),
        '_top' => t('Open link in window root'),
        '_blank' => t('Open link in new window'),
        'user' => t('Allow the user to choose'),
      );
      $form['attributes'] = array (
        '#tree' => true,
      );
      $form['attributes']['target'] = array(
        '#type' => 'radios',
        '#title' => t('Link Target'),
        '#default_value' => $field['attributes']['target'] ? $field['attributes']['target'] : 'default',
        '#options' => $options,
      );
      $form['attributes']['rel'] = array(
        '#type' => 'checkbox',
        '#return_value' => 'nofollow',
        '#prefix' => '<div class="form-item"><label>Nofollow Value: </label>',
        '#suffix' => '</div>',
        '#title' => t('Add rel=&quot;nofollow&quot; Attribute'),
        '#description' => t('The <a href="http://en.wikipedia.org/wiki/Nofollow#rel.3Dnofollow">rel=&quot;nofollow&quot; attribute</a> prevents some search engines from spidering entered links.'),
        '#default_value' => isset($field['attributes']['rel']) ? $field['attributes']['rel'] : false,
      );
      return $form;

    case 'save':
      return array('attributes', 'title');
  }
}

/**
 * Implementation of hook_field().
 */
function link_field($op, &$node, $field, &$node_field, $teaser, $page) {
  switch ($op) {
    case 'load':
      switch($field['type']) {
        case 'link':
          $result = db_query("SELECT field_url, field_title, attributes FROM {node_field_link_data} WHERE vid = %d AND field_name = '%s' ORDER BY delta", $node->vid, $field['field_name']);
          if ($field['multiple']) {
            $values = array();
            while ($value = db_fetch_array($result)) {
              $values[] = array('value' => array('link' => $value['field_url'], 'title' => $value['field_title'], 'attributes' => unserialize($value['attributes'])));
            }
            $additions = array($field['field_name'] => $values);
          }
          else {
            $dbvalue = db_fetch_array($result);
            $value = array ('link' => $dbvalue['field_url'], 'title' => $dbvalue['field_title'], 'attributes' => unserialize($dbvalue['attributes']));
            $additions = array($field['field_name'] => array('value' => $value));
          }
          break;
      }
      return $additions;

    case 'view':
      $output = '';
      if ($field['multiple']) {
        // Convert an old 'single value' field to the first of multiple
        if ($node_field['value']) {
          $node_field[0]['value'] = $node_field['value'];
          unset($node_field['value']);
        }
        foreach ($node_field as $delta => $item) {
          $node_field[$delta]['view'] = _link_field_view($field, $item['value'], $item, $node);
        }
      }
      else {
        // Convert an old 'multiple value' field to single
        if ($node_field[0]['value']) {
          $node_field['value'] = $node_field[0]['value'];
          unset($node_field[0]['value']);
        }
        $node_field['view'] = _link_field_view($field, $node_field['value'], $node_field, $node);
      }
      
      $node->$field['field_name'] = $node_field;
      if ($field['multiple']) {
        $output = '';
        foreach ($node_field as $delta => $item) {
          $output .= '<div class="'. $field['field_name'] .'">'. $item['view'] .'</div>';
        }
        return $output;
      }
      else {
        return '<div class="'. $field['field_name'] .'">'. $node_field['view'] .'</div>';
      }

    case 'insert':
      switch($field['type']) {
        case 'link':
          if ($field['multiple']) {
            foreach ($node_field as $delta => $item) {
              if ($item['value']['link']) {
                db_query("INSERT INTO {node_field_link_data} (nid, vid, field_name, delta, field_url, field_title, attributes) VALUES (%d, %d, '%s', %d, '%s', '%s', '%s')", $node->nid, $node->vid, $field['field_name'], $delta, $item['value']['link'], $item['value']['title'], serialize($item['value']['attributes']));
              }
            }
          }
          else {
            if ($node_field['value']['link']) {
              db_query("INSERT INTO {node_field_link_data} (nid, vid, field_name, field_url, field_title, attributes) VALUES (%d, %d, '%s', '%s', '%s', '%s')", $node->nid, $node->vid, $field['field_name'], $node_field['value']['link'], $node_field['value']['title'], serialize($node_field['value']['attributes']));
            }
          }
          break;
      }
      return;

    case 'update':
      // Delete and insert, rather than update, in case a field was added.
      switch($field['type']) {
        case 'link':
          db_query("DELETE FROM {node_field_link_data} WHERE vid = %d AND field_name = '%s'", $node->vid, $field['field_name']);
          link_field('insert', $node, $field, $node_field, $teaser, $page);
          break;
      }
      return;

    case 'delete':
      // Delete using nid rather than vid to purge all revisions.
      switch($field['type']) {
        case 'link':
          db_query("DELETE FROM {node_field_link_data} WHERE nid = %d AND field_name = '%s'", $node->nid, $field['field_name']);
          break;
      }
      return;
  }
}

/**
 * Implementation of hook_widget_info().
 */
function link_widget_info() {
  return array(
    'link' => array(
      'label' => 'Text Fields for Title and URL',
      'field types' => array('link'),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function link_widget($op, &$node, $field, &$node_field) {
  switch ($op) {
    case 'form':
      $form = array();

      $form[$field['field_name']] = array('#tree' => TRUE);

      if ($field['multiple']) {
        // Generate more fields if necessary on preview
        if ($_POST['edit'][$field['field_name']]) {
          $node_field = $_POST['edit'][$field['field_name']];
        }
        // Convert an old 'single' value field into the first value of a new multi-value field
        if ($node_field['value']) {
          $node_field[0]['value'] = $node_field['value'];
          unset($node_field['value']);
        }
        $delta = 0;
        // Render link fields for all the entered values
        foreach ($node_field as $data) {
        if ($data['value']['link']) {
            _link_widget_form($form[$field['field_name']][$delta], $field, $data, $delta);
            $delta++;
          }
        }
        // Render two additional new link fields
        foreach (range($delta, $delta + 1) as $delta) {
          _link_widget_form($form[$field['field_name']][$delta], $field, $node_field, $delta);
        }
      } // end if multiple
      else {
        // Convert an old 'multiple' value field into the value of a new single-value field
        if ($node_field[0]['value']) {
          $node_field['value'] = $node_field[0]['value'];
          unset($node_field[0]['value']);
        }
        _link_widget_form($form[$field['field_name']], $field, $node_field);
      }
      return $form;

    case 'validate':
      if ($field['multiple']) {
        foreach($node_field as $delta => $value) {
          if ($node_field[$delta]['value']['link']) {
            // Validate the link
            if (!link_validate_link($value['value']['link'])) {
              form_set_error($field['field_name'] .']['. $delta. '][value][link', t('Not a valid URL.'));
            }
            // Require a title for the link if necessary
            elseif ($field['title'] == 'required' && strlen(trim($value['value']['title'])) == 0) {
              form_set_error($field['field_name'] .']['. $delta. '][value][title', t('Titles are required for all links.'));
            }
          }
          // Require a link if we have a title
          elseif (strlen($value['value']['title']) > 0) {
            form_set_error($field['field_name'] .']['. $delta. '][value][link', t('You cannot enter a title without a link.'));
          }
        }
      }
      else {
        if ($node_field['value']['link']) {
          if (!link_validate_link($node_field['value']['link'])) {
            form_set_error($field['field_name'] .'][value][link', t('Not a valid URL.'));
          }
        }
      }
      return;
      
    case 'process form values':
      if ($field['multiple']) {
        foreach($node_field as $delta => $value) {
          _link_widget_process($node_field[$delta],$delta);
        }
      }
      else {
        _link_widget_process($node_field);
      }
      return;
    
    case 'submit':
      return;
  }
}

/**
 * Helper function renders the link widget in both single and multiple value cases.
 */

function _link_widget_form (&$form_item, $field, $node_field, $delta = 0) {
  $form_item['value'] = array(
    '#tree' => true,
  );
  $form_item['value']['link'] = array(
    '#type' => 'textfield',
    '#title' => t($field['widget']['label'])." ".t('URL'),
    '#default_value' => $node_field['value']['link'],
    '#required' => ($delta == 0) ? $field['required'] : FALSE,
  );
  if ($field['title'] != 'none') {
    $form_item['value']['title'] = array(
      '#type' => 'textfield',
      '#title' => t($field['widget']['label'])." ".t('Title'),
      '#default_value' => $node_field['value']['title'],
      '#required' => ($delta == 0 && $field['title'] == 'required') ? $field['required'] : FALSE,
    );
  }
  if ($field['attributes']['target'] == 'user') {
    $form_item['value']['attributes']['target'] = array(
      '#type' => 'checkbox',
      '#title' => t('Open URL in a New Window'),
      '#default_value' => $node_field['value']['attributes']['target'],
      '#return_value' => "_blank",
    );
  }
}

function _link_widget_process (&$node_field, $delta = 0) {
  // Remove the target attribute if not selected
  if (!$node_field['value']['attributes']['target'] || $node_field['value']['attributes']['target'] == "default") {
    unset($node_field['value']['attributes']['target']);
  } 
}

/**
 * Implementation of hook_field_view() which performs any translation necessary.
 */
function _link_field_view($field, $value, $addlfields = array(), $node = NULL) {
  $attributes = array();
  // Add attributes defined at the widget level
  if (is_array($value['attributes'])) {
    foreach($value['attributes'] as $attribute => $attbvalue) {
      if (isset($field['attributes'][$attribute]) && $field['attributes'][$attribute] == 'user') {
        $attributes[$attribute] = $attbvalue;
      }
    }
  }
  // Add attributes defined at the field level
  if (is_array($field['attributes'])) {
    foreach($field['attributes'] as $attribute => $attbvalue) {
      if (!empty($attbvalue) && $attbvalue != 'default' && $attbvalue != 'user') {
        $attributes[$attribute] = $attbvalue;
      }
    }
  }
  // Build the link with a title
  if (strlen(trim($value['title']))) {
    $output = l($value['title'],link_cleanup_url($value['link']),$attributes);
  }
  // Build the link with the URL as the title (max 80 characters)
  else {
    $output = l(strlen($value['link']) > 80 ? substr($value['link'],0,80)."..." : $value['link'],link_cleanup_url($value['link']),$attributes);
  }
  return $output;
}

/**
 * Implementation of hook_views_tables().
 */
function link_views_tables() {
  $tables = array();

  $fields = content_fields();
  foreach ($fields as $field) {
    if ($field['type'] == 'link') {
      $tables['node_field_link_data_'. $field['field_name']] = array(
        'name' => 'node_field_link_data',
        'join' => array(
          'left' => array(
            'table' => 'node',
            'field' => 'vid',
          ),
          'right' => array(
            'field' => 'vid',
          ),
            'extra' => array('field_name' => $field['field_name']),
        ),
        'fields' => array(
          'field_url' => array(
            'name' => 'Link URL: '. $field['field_name'],
            'sortable' => TRUE,
          ),
          'field_title' => array(
            'name' => 'Link Title: '. $field['field_name'],
            'sortable' => TRUE,
          ),
        ),
        'sorts' => array(
          'field_url' => array('name' => 'Link URL: '. $field['field_name']),
          'field_title' => array('name' => 'Link Title: '. $field['field_name']),
        ),
        'filters' => array(
          'field_url' => array(
            'name' => 'Link URL: '. $field['field_name'],
            'operator' => array(
              '='  => 'is',
              'contains' => 'contains',
              'begins' => 'begins with',
              'ends' => 'ends wth',
              'LIKE'  => 'matches pattern',
            ),
            'operator-handler' => '_text_filter_operator',
          ),
          'field_title' => array(
            'name' => 'Link Title: '. $field['field_name'],
            'operator' => array(
              '='  => 'is',
              'contains' => 'contains',
              'begins' => 'begins with',
              'ends' => 'ends wth',
              'LIKE'  => 'matches pattern',
            ),
            'operator-handler' => '_text_filter_operator',
          ),
        ),
      );
    }
  }

  return $tables;
}

/**
 * Forms a valid URL if possible from an entered address.
 * Trims whitespace and automatically adds an http:// to addresses without a protocol specified
 *
 * @param string $url
 * @param string $protocol The protocol to be prepended to the url if one is not specified
 */
function link_cleanup_url ($url, $protocol = "http") {
  $url = trim($url);
  
  // Check if there is no protocol specified
  $protocol_match = preg_match("/^([a-z0-9][a-z0-9\.\-_]*:\/\/)/i",$url);
  if (empty($protocol_match)) {
    // But should it be? Add an automatic http:// if it starts with a domain name
    $domain_match = preg_match('/^(([a-z0-9]([a-z0-9\-_]*\.)+)(aero|arpa|biz|com|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|pro|travel|[a-z]{2}))/i',$url);
    if (!empty($domain_match)) {
      $url = $protocol."://".$url;
    }
  }
  
  return $url;
}

/**
 * A lenient verification for URLs. Accepts all URLs following RFC 1738 standard for URL formation.  
 *
 * @param string $text
 * @return mixed Returns boolean FALSE if the URL is not valid. On success, returns an object with
 * the following attributes: protocol, hostname, ip, and port.
 */
function link_validate_link($text) {
  if (!preg_match(
    // protocol
    '/^([a-z0-9][a-z0-9\.\-_]*:\/\/)?'.
  '('.
    // domains
      '(([a-z0-9]([a-z0-9\-_]*\.)+)(aero|arpa|biz|com|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|pro|travel|[a-z]{2}))'.
      // OR ip addresses
      '|(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'.
  ')'.
    // port number
    '(:([0-9]{1,4}))?'.
    // the rest of the path
    "(\/[a-z0-9_\-\.~+%=&,$'():;*@]+)*".
    // anchors
    "#?[a-z0-9_\-\.~+%=&,$'():;*@]*".
    // the query string
    "(\?[a-z0-9+_\-\.\/%=&,$'():;*@]*)?". //)?". //$-_.+*'()
    // forward slash 0 or 1 times
    '(\/)?'.
    // end of the expression, case insensitive
    '$/i', $text, $m)) {
    return false;
  }
  else {
    $url = new stdClass();
    $url->protocol = $m[2];
    $url->hostname = strtolower($m[5]).strtolower($m[7]);
    $url->ip = $m[8];
    $url->port = $m[10];
    return $url;
  }
}
