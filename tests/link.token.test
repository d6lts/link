<?php
//$Id$

/**
 * Testing that tokens can be used in link titles
 */
class LinkTokenTest extends DrupalWebTestcase {

  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Link tokens - browser test'),
      'description' => t('Tests including tokens in link titles, making sure they appear in node views. <strong>Requires <a href="@token_link">Token module</a>.</strong>'),
      'group' => t('Link'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('content', 'link', 'token');
  }

  /**
   * Creates a link field with a required title enabled for user-entered tokens.
   * Creates a node with a token in the link title and checks the value.
   */
  function testUserTokenLinkCreate() {
    $account = $this->drupalCreateUser(array('administer content types', 'access content', 'create page content'));
    $this->drupalLogin($account);

    // create field
    $name = strtolower($this->randomName());
    $edit = array(
      '_add_new_field[label]' => $name,
      '_add_new_field[field_name]' => $name,
      '_add_new_field[type]' => 'link',
      '_add_new_field[widget_type]' => 'link',
    );
    $this->drupalPost('admin/content/node-type/page/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(
      'title' => 'required',
      'enable_tokens' => 1), t('Save field settings'));

    // Is field created?
    $this->assertRaw(t('Added field %label.', array('%label' => $name)), 'Field added');

    // create page form
    $this->drupalGet('node/add/page');
    $field_name = 'field_' . $name;
    $this->assertField($field_name . '[0][title]', 'Title found');
    $this->assertField($field_name . '[0][url]', 'URL found');

    $input = array(
        'href' => 'http://example.com/' . $this->randomName(),
        'label' => $this->randomName(),
    );
    
    $this->drupalLogin($account);
    $this->drupalGet('node/add/page');

    $edit = array(
      'title' => $input['label'],
      $field_name . '[0][title]' => $input['label'] . " [type]",
      $field_name . '[0][url]' => $input['href'],
    );
    $this->drupalPost(NULL, $edit, t('Save'));    
    $url = $this->getUrl();

    // change to anonymous user
    $this->drupalLogout();    
    $this->drupalGet($url);

    $this->assertRaw(l($input['label'] . ' page', $input['href']));
  }
  
  
  /**
   * Creates a link field with a static title and an admin-entered token.
   * Creates a node with a link and checks the title value.
   */
  function testStaticTokenLinkCreate() {
    $account = $this->drupalCreateUser(array('administer content types', 'access content', 'create page content'));
    $this->drupalLogin($account);

    // create field
    $name = strtolower($this->randomName());
    $edit = array(
      '_add_new_field[label]' => $name,
      '_add_new_field[field_name]' => $name,
      '_add_new_field[type]' => 'link',
      '_add_new_field[widget_type]' => 'link',
    );
    $this->drupalPost('admin/content/node-type/page/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(
      'title' => 'value',
      'title_value' => $name . ' [type]'), t('Save field settings'));

    // Is filed created?
    $this->assertRaw(t('Added field %label.', array('%label' => $name)), 'Field added');

    // create page form
    $this->drupalGet('node/add/page');
    $field_name = 'field_' . $name;
    $this->assertField($field_name . '[0][url]', 'URL found');

    $input = array(
      'href' => 'http://example.com/' . $this->randomName()
    );

    $this->drupalLogin($account);
    $this->drupalGet('node/add/page');

    $edit = array(
      'title' => $name,
      $field_name . '[0][url]' => $input['href'],
    );
    $this->drupalPost(NULL, $edit, t('Save'));    
    
    $url = $this->getUrl();

    // change to anonymous user
    $this->drupalLogout();    
    $this->drupalGet($url);

    $this->assertRaw(l($name . ' page', $input['href']));
  }
  
  /**
   * Creates a link field with a static title and an admin-entered token.
   * Creates a node with a link and checks the title value.
   *
   * Basically, I want to make sure the [title-raw] token works, because it's a
   * token that changes from node to node, where [type]'s always going to be the
   * same.
   */
  function testStaticTokenLinkCreate2() {
    $account = $this->drupalCreateUser(array('administer content types', 'access content', 'create page content'));
    $this->drupalLogin($account);

    // create field
    $name = strtolower($this->randomName());
    $edit = array(
      '_add_new_field[label]' => $name,
      '_add_new_field[field_name]' => $name,
      '_add_new_field[type]' => 'link',
      '_add_new_field[widget_type]' => 'link',
    );
    $this->drupalPost('admin/content/node-type/page/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(
      'title' => 'value',
      'title_value' => $name . ' [title-raw]'), t('Save field settings'));

    // Is field created?
    $this->assertRaw(t('Added field %label.', array('%label' => $name)), 'Field added');

    // create page form
    $this->drupalGet('node/add/page');
    $field_name = 'field_' . $name;
    $this->assertField($field_name . '[0][url]', 'URL found');

    $input = array(
      'href' => 'http://example.com/' . $this->randomName()
    );

    $this->drupalLogin($account);
    $this->drupalGet('node/add/page');

    $edit = array(
      'title' => $name,
      $field_name . '[0][url]' => $input['href'],
    );
    $this->drupalPost(NULL, $edit, t('Save'));    
    
    $url = $this->getUrl();

    // change to anonymous user
    $this->drupalLogout();    
    $this->drupalGet($url);

    $this->assertRaw(l($name .' '. $name, $input['href']));
  }
}
