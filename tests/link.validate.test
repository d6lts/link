<?php
// $Id$

/**
 * @file
 * Tests that exercise the validation functions in the link module.
 */

// Let's include the parent class.
module_load_include('test', 'content', 'tests/content.crud');

class LinkValidateTestCase extends ContentCrudTestCase {
    public $permissions = array(
      'access content',
      'administer content types',
      'administer nodes',
      'administer filters',
      'access comments',
      'post comments',
      'post comments without approval',
      'access administration pages',
  );
    
  function setUp() {
    parent::setUp('link');
    $this->loginWithPermissions($this->permissions);
  }
  
  function createLink($url, $title, $attributes = array()) {
    return array(
      'url' => $url,
      'title' => $title,
      'attributes' => $attributes,
    );
  }
  
  /**
   * Takes a url, and sees if it can validate that the url is valid.
   */
  function link_test_validate_url($url) {
    $this->acquireContentTypes(1);
    variable_set('node_options_'. $this->content_types[0]->name, array('status', 'promote'));
    $field_settings = array(
      'type' => 'link',
      'widget_type' => 'link',
      'type_name' => $this->content_types[0]->name,
      'attributes' => array(), // <-- This is needed or we have an error.
    );

    $field = $this->createField($field_settings, 0);

    $field_db_info = content_database_info($field);

    $this->acquireNodes(1);
    //$this->fail("We now have ". count($this->nodes) ." nodes.");
    
    $node = node_load($this->nodes[0]->nid);
    
    $this->drupalGet('node/'. $this->nodes[0]->nid);
    
    $edit = array();
    $edit[$field['field_name'] .'[0][url]'] = $url;
    
    $this->drupalPost('node/'. $this->nodes[0]->nid .'/edit', $edit, t('Save'));
    
    // Make sure we get a new version!
    $node = node_load($this->nodes[0]->nid, NULL, TRUE);
    $this->assertText(t('@type @title has been updated.',
                        array('@title' => $node->title,
                              '@type' => $this->content_types[0]->name)));
    
    
    $this->assertEqual($url, $node->{$field['field_name']}[0]['url']);
  }
}

class LinkValidateTest extends LinkValidateTestCase {
  
  function getInfo() {
    return array(
      'name' => t('Link Validation Tests'),
      'description' => t('Tests the field validation.'),
      'group' => t('Link'),
    );
  }
  
  function test_link_validate_basic_url() {
    $this->link_test_validate_url('http://www.example.com');
  }
  
  function test_link_validate_bad_url() {
    $this->acquireContentTypes(1);
    variable_set('node_options_'. $this->content_types[0]->name, array('status', 'promote'));
    $field_settings = array(
      'type' => 'link',
      'widget_type' => 'link',
      'type_name' => $this->content_types[0]->name,
      'attributes' => array(), // <-- This is needed or we have an error.
    );

    $field = $this->createField($field_settings, 0);
    //$this->pass('<pre>'. print_r($field, TRUE) .'</pre>');
    $field_db_info = content_database_info($field);

    $this->acquireNodes(2);
    
    $node = node_load($this->nodes[0]->nid);
    
    $this->drupalGet('node/'. $this->nodes[0]->nid);
    
    $edit = array();
    $edit[$field['field_name'] .'[0][url]'] = 'edik:naw';
    
    $this->drupalPost('node/'. $this->nodes[0]->nid .'/edit', $edit, t('Save'));
    //$this->pass($this->content);
    $this->assertText(t('Not a valid URL.'));
    
    // Make sure we get a new version!
    $node = node_load($this->nodes[0]->nid, NULL, TRUE);
    $this->assertNotEqual('edik:naw', $node->{$field['field_name']}[0]['url']);
    
  }
  
  // Validate that '<front>' is a valid url.
  function test_link_front_url() {
    $this->link_test_validate_url('<front>');
  }
  
  // Validate that an internal url would be accepted.
  function test_link_internal_url() {
    $this->link_test_validate_url('node/32');
  }
  
  // Validate a simple mailto.
  function test_link_mailto() {
    $this->link_test_validate_url('mailto:jcfiala@gmail.com');
  }

  function test_link_external_https() {
    $this->link_test_validate_url('https://www.example.com/');
  }
  
  function test_link_ftp() {
    $this->link_test_validate_url('ftp://www.example.com/');
  }
}

class LinkValidateTestNews extends LinkValidateTestCase {
  
  function getInfo() {
    return array(
      'name' => t('Link News Validation Tests'),
      'description' => t('Tests the field validation for usenet urls.'),
      'group' => t('Link'),
    );
  }
  
  // Validate a news link to a message group
  function test_link_news() {
    $this->link_test_validate_url('news:comp.infosystems.www.misc');
  }
  
  // Validate a news link to a message id.  Said ID copied off of google groups.
  function test_link_news_message() {
    $this->link_test_validate_url('news:hj0db8$vrm$1@news.eternal-september.org');
  }
}

class LinkValidateSpecificURL extends LinkValidateTestCase {
  function getInfo() {
    return array(
      'name' => t('Link Specific URL Validation Tests'),
      'description' => t('Tests field validation with unusual urls'),
      'group' => t('Link'),
    );
  }
  
  // Lets throw in a lot of umlouts for testing!
  function test_umlout_url() {
    $this->link_test_validate_url('http://üÜü.exämple.com/nöde');
  }
  
  function test_umlout_mailto() {
    $this->link_test_validate_url('mailto:Üser@exÅmple.com');
  }
  
  function test_curly_brackets_in_query() {
    $this->link_test_validate_url('http://www.healthyteennetwork.org/index.asp?Type=B_PR&SEC={2AE1D600-4FC6-4B4D-8822-F1D5F072ED7B}&DE={235FD1E7-208D-4363-9854-4E6775EB8A4C}');
  }
  
}